--[[ Library Variables ]]--
local repo = 'https://raw.githubusercontent.com/wally-rblx/LinoriaLib/main/'
local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

--[[ regular script variables]]--
plr = game.Players.LocalPlayer 
char = plr.Character or plr.CharacterAdded:Wait()
--[[ next we define
@rs = replicatedStorage
@ts = tweenservice
@ws = workspace
@hs = httpservice
]]--

rs = game.ReplicatedStorage
ts = game:GetService("TweenService")
ws = game.Workspace
hs = game:GetService("HttpService")
--[[ save config vars]]--
if not isfolder("finalfarm") then 
    makefolder("finalfarm") 
end 

if not isfolder("finalfarm/"..plr.Name) then 
    makefolder("finalfarm/"..plr.Name)
end
if not isfile("finalfarm/"..plr.Name.."/dungeonsettings.txt") then
    st = {
        farmid = "",
        chestid = "",
        keepchest = false,
        dungeonfarm = false, 
        savedspeed = 60,
        rarity = 1,
        mold = 1,
        url = "",
        id = "",
        sendwebhook = false,
        fps = 5,
        render = false,
        cap = false,
    }
    writefile("finalfarm/"..plr.Name.."/dungeonsettings.txt",hs:JSONEncode(st))
end
writefile("finalfarm/"..plr.Name.."/totalgems.txt",plr.PlayerGui.MainGui.TopHolder.Gems.Price.Text:gsub("%p",""))
writefile("finalfarm/"..plr.Name.."/totalimp.txt",plr.PlayerGui.MainGui.ArtifactMenu.Holder.Impossible.Amount.Text:gsub("x",""))

st = hs:JSONDecode(readfile("finalfarm/"..plr.Name.."/dungeonsettings.txt"))
--[[ Creating a Window]]--
local Window = Library:CreateWindow({
    Title = 'Sword Factory X',
    Center = true, 
    AutoShow = true,
})

--[[ Creating the tabs]]--
local Tabs = {
    -- Creates a new tab titled Main
    Main = Window:AddTab('Main'),
    Web = Window:AddTab("Webhook"),
    Set = Window:AddTab("Settings"),
}

--[[ Section for autofarm ]]--
autofarm = Tabs.Main:AddLeftGroupbox("[Autofarm]")
autofarm:AddToggle("dfarm",{
    Text = "Dungeon Farm Toggle",
    Default = st.dungeonfarm,
    Tooltip = "Enable or Disable Dungeon Farm Toggle"
})
autofarm:AddToggle("keeptoggle",{
    Text = "Keep Chestfinder+?",
    Default = st.keepchest,
    Tooltip = "will keep chestfinder+ swords u get from dungions"
})

Toggles.dfarm:OnChanged(function()
    st.dungeonfarm = Toggles.dfarm.Value
end)
Toggles.keeptoggle:OnChanged(function()
    st.keepchest = Toggles.keeptoggle.Value
end)

--[[ Section for settings ]]--
settings = Tabs.Main:AddRightGroupbox("[Settings]")
registerfarm = settings:AddButton("Register Farm Sword",function()
    if char:FindFirstChild("Sword") ~= nil then 
        st.farmid = char.Sword.Config.ITEMID.Value
        game:GetService("StarterGui"):SetCore("SendNotification",{
            Title = "Success!",
            Text = "ID: "..st.farmid,
        })
    end 
end)
registerchest = settings:AddButton("Register Chest Sword",function()
    if char:FindFirstChild("Sword") ~= nil then 
        st.chestid = char.Sword.Config.ITEMID.Value 
        game:GetService("StarterGui"):SetCore("SendNotification",{
            Title = "Success!",
            Text = "ID: "..st.chestid,
        })
    end 
end)
settings:AddSlider("tspeed",{
    Text = "Tween Speed",
    Default = st.savedspeed,
    Min = 1,
    Max = 150,
    Rounding = 0
})

Options.tspeed:OnChanged(function()
    st.savedspeed = Options.tspeed.Value
end)

registerfarm:AddTooltip("press this holding sword out to register (farm)")
registerchest:AddTooltip("press this holding sword out to register (chest)")
--[[ Section for dropdowns]]--
--[[dropdown section vars]]--
moldTable = {}
for i,v in pairs(require(rs.SharedLibrary.Molds).List) do 
    if v.Name ~= "Wood" and v.Name ~= "Unknown" then 
        table.insert(moldTable,v.Name)
    end
end 
rarityTable = {}
for i,v in pairs(require(rs.SharedLibrary.Rarities).List) do
    if v.Name ~= "Basic-" and v.Name ~= "None" then 
        table.insert(rarityTable,v.Name)
    end
end
--[[ end of dropdown section vars]]--
dropdowns = Tabs.Main:AddRightGroupbox("[Dropdowns]")

dropdowns:AddDropdown('rarity', {
    Values = rarityTable,
    Default = rs.Rarities[st.rarity].RarityName.Value, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Rarity Selected: ',
    Tooltip = 'keeps this rarity and above', -- Information shown when you hover over the textbox
})

dropdowns:AddDropdown('mold', {
    Values = moldTable,
    Default = rs.AllMolds[st.mold].MoldName.Value, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Mold Selected: ',
    Tooltip = 'keeps this mold and above', -- Information shown when you hover over the textbox
})

Options.rarity:OnChanged(function()
    st.rarity = table.find(rarityTable,Options.rarity.Value)
end)

Options.mold:OnChanged(function()
    st.mold = table.find(moldTable,Options.mold.Value)
end)

--[[ end of dropdowns section]]--

--[[ start of webhook tab]]--
webst = Tabs.Web:AddRightGroupbox("[URL & ID]")
webtoggle = Tabs.Web:AddLeftGroupbox("[Toggles]")

webst:AddInput("url",{
    Default = st.url,
    Numeric = false,
    Finished = true,
    Text = "Webhook URL",
    Tooltip = "Input webhook url here for a cookie (my fat juicy cock)",
})
webst:AddInput("id",{
    Default = st.id,
    Numeric = true,
    Finished = true,
    Text = "Discord ID",
    Tooltip = "This is an optional thing (i dont recommend many ping)",
})

Options.url:OnChanged(function()
    st.url = tostring(Options.url.Value)
end)
Options.id:OnChanged(function()
    st.id = tostring(Options.id.Value)
end)

-- seperation thign

webtoggle:AddToggle("sendweb",{
    Text = "Send Webhook after Every Dungeon",
    Default = st.sendwebhook,
    Tooltip = 'this sends a dungeon summary its sexy use it ok mommy?'
})

Toggles.sendweb:OnChanged(function()
    st.sendwebhook = Toggles.sendweb.Value
end)   
--[[ end of webhook tab]]--
--[[ start of settings tab]]
perf = Tabs.Set:AddLeftGroupbox("[Performance Settings]")
config = Tabs.Set:AddRightGroupbox("[Save Config]")

perf:AddSlider("slidefps",{
    Text =  "Selected FPS",
    Default = st.fps,
    Min = 5,
    Max = 60,
    Rounding = 0
})
Options.slidefps:OnChanged(function()
    st.fps = Options.slidefps.Value
end)

perf:AddToggle('render',{
    Text = "3D Rendering Off",
    Default = st.render,
    Tooltip = 'this sets 3d rendering to false when toggled'
})

Toggles.render:OnChanged(function()
    st.render = Toggles.render.Value
end)
perf:AddToggle('cap',{
    Text = "Cap FPS at selected fps",
    Default = st.cap,
    Tooltip = 'this will cap fps at what u have selected on slider',
})

Toggles.cap:OnChanged(function()
    st.cap = Toggles.cap.Value 
end)

config:AddButton('Save Config',function()
    writefile('finalfarm/'..plr.Name.."/dungeonsettings.txt",hs:JSONEncode(st))
end)
config:AddButton('Reset Current Config',function()
    st = {
        farmid = "",
        chestid = "",
        keepchest = false,
        dungeonfarm = false, 
        savedspeed = 60,
        rarity = 1,
        mold = 1,
        url = "",
        id = "",
        sendwebhook = false,
        fps = 5,
        render = false,
        cap = false,
    }
    writefile('finalfarm/'..plr.Name.."/dungeonsettings.txt",hs:JSONEncode(st))
end)
--[[ all function s for dungion farm]] -- 
function Chestfinder(a)
    if st.keepchest then
        for i,v in pairs(a:GetChildren()) do 
            for i = 1,4 do 
                if v.Name == "Enchant"..i then 
                    if v.Value:find("Chestfinder%+") then 
                        return true 
                    end
                end
            end 
        end 
    end 
end 
--[[ 
    Auto Drop Check Enchant
    This is for keeping Chestfinder+ swords.
]]--
function AutoDrop()
    char.Humanoid:UnequipTools() -- make sure every sword is in backpackw
    wait(0.2) -- wait a lil bit
    for i,v in pairs(plr.Backpack:GetChildren()) do -- loop through backpack
        if v:FindFirstChild("Config") and v.Config:FindFirstChild("Rarity") and v.Config:FindFirstChild("ITEMID") and v.Config:FindFirstChild("Mold") and v.Config:FindFirstChild("Cracked") then 
            if v.Config.Mold.Value >= st.mold and v.Config.Cracked.value == true then 
            else 
                if v.Config.Rarity.Value < st.rarity then 
                    if v.Config.ITEMID.Value ~= st.farmid and v.Config.ITEMID.Value ~= st.chestid then 
                        if not Chestfinder(v.Config) then 
                            char.Humanoid:EquipTool(v)
                            rs.Framework.RemoteEvent:FireServer(0,"BackpackServer","Drop",{})
                        end 
                    end
                end
            end
        end
    end
end 
--[[
    Enter Graveyard Function:
    This will provide a more reusable function.
]]--

function enterGraveyard()
    if ws:FindFirstChild("HalloweenTower") == nil then 
        if ws.Maps:FindFirstChild("Graveyard") ~= nil then -- if graveyard exists then 
            if ws.Maps:FindFirstChild("Graveyard"):FindFirstChild("DungeonMatchmaking"):FindFirstChild("MatchmakingPad") == nil then 
                game:GetService("ReplicatedStorage").Events.ToMap:FireServer(rs.Data[plr.Name].Stats,workspace[plr.Name.."'s Base"],plr.Name,"Graveyard")
            else 
                game:GetService("ReplicatedStorage").Events.ToMap:FireServer(rs.Data[plr.Name].Stats,workspace[plr.Name.."'s Base"],plr.Name,"Graveyard")
            end
        else 
            game:GetService("ReplicatedStorage").Events.ToMap:FireServer(rs.Data[plr.Name].Stats,workspace[plr.Name.."'s Base"],plr.Name,"Graveyard")
            -- ^^ if graveyard doesn't exist then tp to graveyard.]
        end 
    end
end

--[[
    Start Tween Function:
    This will provide with function so there's less repetitive code.
]]-- 
function Tween(Part,ExtraX,ExtraY,ExtraZ)
    DistanceApart = (char.HumanoidRootPart.Position-Part.Position).Magnitude 
    Info = TweenInfo.new(DistanceApart/st.savedspeed,Enum.EasingStyle.Linear)

    a = ts:Create(char.HumanoidRootPart,Info,{CFrame = Part.CFrame*CFrame.new(ExtraX,ExtraY,ExtraZ)})
    a:Play()
    a.Completed:Wait()
end 
function Comma(amount)
    while true do wait()
        amount,k = string.gsub(amount,"^(-?%d+)(%d%d%d)",'%1,%2')
        if k == 0 then break end
    end
	return amount
end

--[[
    Start Auto Equip Function
    This will provide a very reusable function.
]]--
function AutoEquip(Farm,Chest) -- whether or not we want to equip chest or farm sword
    for i,v in pairs(plr.Backpack:GetChildren()) do  -- loop through backpack
        if v:FindFirstChild("Config") and v.Config:FindFirstChild("ITEMID") then
            if Farm then 
                if v.Config.ITEMID.Value == st.farmid then 
                    char.Humanoid:EquipTool(v)
                end
            end
            if Chest then 
                if v.Config.ITEMID.Value == st.chestid then 
                    char.Humanoid:EquipTool(v)
                end
            end
        end
    end
end 
--[[ 
    Define function that checks for mobs being alive
]]--
function checkForMobs()
    for i,v in pairs(ws.Mobs:GetChildren()) do 
        if v.Name == "Scarecrow" or v.Name == "Skeleton" or v.Name == "Bimbo the Terrifier" then 
            return true 
        end
    end 
end
--[[
    Define a function that returns the nearest mob
]]--
function ClosestMob(table) 
    Closest = 9e9
    for i,v in pairs(table) do 
        if (char.HumanoidRootPart.Position-v.HumanoidRootPart.Position).Magnitude then 
            Distance = (char.HumanoidRootPart.Position-v.HumanoidRootPart.Position).Magnitude 
            if Distance < Closest then 
                Closest = Distance 
                ClosestMobReturned = v 
            end
        end
    end
    return ClosestMobReturned
end 
--[[ start of the actual toggles farming]]--
spawn(function()
    while true do wait()
        if st.dungeonfarm then 
            pcall(function()
                if game.Players.LocalPlayer.PlayerGui.MainGui:FindFirstChild("DungeonSummary") then
                    game.Players.LocalPlayer.PlayerGui.MainGui.DungeonSummary:Destroy()
                end
                AutoEquip(true,false)
                ws.Gravity = 0
                enterGraveyard()
                wait(2)
                AutoDrop()
                AutoEquip(true,false)
                repeat wait() 
                    if ws:FindFirstChild("HalloweenTower") == nil then 
                        if ws.Maps.Graveyard.Brick.BillboardGui.Counter.Visible == false then
                            if (char.HumanoidRootPart.Position-ws.Maps.Graveyard.DungeonMatchmaking.MatchmakingPad.Position).Magnitude >= 35 then
                                Tween(ws.Maps.Graveyard.DungeonMatchmaking.MatchmakingPad,0,5,0)
                            else 
                                ws.Gravity = 198 -- set gravity back to normal when near pad 
                            end
                        end
                    end
                until ws:FindFirstChild("HalloweenTower") ~= nil 
                repeat wait() until ws.CurrentCamera.CameraType == Enum.CameraType.Scriptable -- wait until cutscene is active
                repeat wait() until ws.CurrentCamera.CameraType == Enum.CameraType.Custom -- wait until cutscene is over
                wait(6) -- wait 5 seconds to give mobs to do load
                while wait() do -- start a loop
                    mobs = {} -- define a table ( mobs will go here)!
                    for i,v in pairs(ws.Mobs:GetChildren()) do -- loop through mob folder
                        if v.Name == "Skeleton" or v.Name == "Scarecrow" then -- if dungeon mob name then 
                            if v:FindFirstChild("HumanoidRootPart") then -- if the mob has a humanoidrootpart then 
                                table.insert(mobs,v) -- insert mob instance to table
                            end
                        end
                    end 
                    wait(0.1) -- give a bit of time
                    --[[
                        Find closest mob under here
                    ]]--
                    m = ClosestMob(mobs)
                    repeat wait()
                        if m:FindFirstChild("HumanoidRootPart") then 
                            Tween(m:FindFirstChild("HumanoidRootPart"),0,1,-2)
                            if char:FindFirstChild("Sword") then 
                                char:FindFirstChild("Sword"):Activate()
                                if char:FindFirstChild("Sword").Config.ITEMID.Value ~= st.farmid then 
                                    AutoEquip(true,false)
                                end 
                            else 
                                AutoEquip(true,false)
                            end
                            if m:FindFirstChild("Humanoid") == nil or m:FindFirstChild("Humanoid").Health == 0 then m:Destroy() end
                        end
                    until m == nil or m:FindFirstChild("Humanoid") == nil or m:FindFirstChild("Humanoid").Health == 0 or ws:FindFirstChild("HalloweenTower") == nil
                    if ws:FindFirstChild("HalloweenTower") == nil then break end 
                    if not checkForMobs() then 
                        break 
                    end
                end 
                wait(1)
                if ws:FindFirstChild("HalloweenTower") then 
                    char.HumanoidRootPart.CFrame = ws:FindFirstChild("HalloweenTower").EndModule.Parts.PlayerEnterTrigger.CFrame
                end
                wait(1.5)
                while true do wait()
                    for _,v in pairs(ws.Mobs:GetChildren()) do  -- loop through mob table
                        if v.Name == "Bimbo the Terrifier" then  -- if find the boss 
                            if v:FindFirstChild("HumanoidRootPart") then -- if the boss has an humanoidrootpart
                                repeat wait(0.1) -- repeat 
                                    if v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") then
                                        if v:FindFirstChild("Humanoid") ~= nil then 
                                            v.Humanoid.Health = 0
                                            char.HumanoidRootPart.CFrame = v.HumanoidRootPart.CFrame*CFrame.new(0,3,2.5) -- tp to boss
                                        end 
                                    else 
                                    end
                                    if char:FindFirstChild("Sword") then  -- if character has a swrord
                                        char:FindFirstChild("Sword"):Activate() -- then attack
                                        if char:FindFirstChild("Sword").Config.ITEMID.Value ~= st.farmid then  -- if char is holding wrong sword then 
                                            AutoEquip(true,false) -- equip
                                        end 
                                    else  -- if char has no swordS
                                        AutoEquip(true,false) -- then equip
                                    end
                                until not checkForMobs() or v:FindFirstChild("Humanoid") == nil or v:FindFirstChild("Humanoid").Health <= 0 or ws:FindFirstChild("HalloweenTower") == nil-- until no mobs exist
                            else 
                            end 
                            if ws:FindFirstChild("HalloweenTower") == nil then break end
                        end
                    end
                    if not checkForMobs() then break end 
                end 
                for names,_ in pairs(require(rs.SharedLibrary.Chests)) do 
                    if ws:FindFirstChild("HalloweenTower") ~= nil then
                        for i,v in pairs(ws:FindFirstChild("HalloweenTower"):GetDescendants()) do 
                            if v.Name == names then 
                                if v:FindFirstChild("Chest_Base").Body:FindFirstChild("Dungeon_Doors") == nil or v:FindFirstChild("Lock") == nil then 
                                    nokeys = false
                                    nogp = false
                                    repeat wait()
                                        for i,v in pairs(plr.Backpack:GetChildren()) do 
                                            if i >= 9 then 
                                                AutoDrop()
                                            end
                                        end
                                        if v.Name == "MaliceChest" then 
                                            if plr.PlayerGui.MainGui.Inventory.Holder:FindFirstChild("Item") == nil then 
                                                nokeys = true 
                                            end 
                                        end
                                        if v.Name == "ExtraHallowedChest" then 
                                            if rs.Data[plr.Name].Stats.ExtraChest.Value == false then 
                                                nogp = true 
                                            end
                                        end 
                                        char.HumanoidRootPart.CFrame = v.Effect.CFrame 
                                        AutoEquip(false,true)
                                        if v:FindFirstChildWhichIsA("ProximityPrompt",true) then 
                                            fireproximityprompt(v:FindFirstChildWhichIsA("ProximityPrompt",true),100)
                                        end
                                        if char:FindFirstChild("Sword") == nil then 
                                        else
                                            char.Sword:Activate()
                                        end 
                                    until v:FindFirstChild("Chest_Base").Body:FindFirstChild("Dungeon_Doors") ~= nil or v:FindFirstChild("Lock") ~= nil or nokeys or nogp or ws:FindFirstChild("HalloweenTower") == nil
                                    for i,v in pairs(plr.Backpack:GetChildren()) do 
                                        if i >= 9 then 
                                            AutoDrop()
                                        end
                                    end
                                end 
                            end 
                        end 
                    end
                end
                wait(0.5)
                AutoDrop()
                wait(0.5)
                if ws:FindFirstChild("HalloweenTower") ~= nil then
                    for i,v in pairs(ws:FindFirstChild("HalloweenTower").EndModule.Parts.Stands:GetChildren()) do 
                        if v:FindFirstChildWhichIsA("TextLabel",true).Text == plr.Name then 
                            Tween(v:FindFirstChild("Pad",true),0,1.5,0)
                        end
                    end
                end 
                wait(0.1)
                writefile("finalfarm/"..plr.Name.."/totalgems.txt",plr.PlayerGui.MainGui.TopHolder.Gems.Price.Text:gsub("%p",""))
                writefile("finalfarm/"..plr.Name.."/totalimp.txt",plr.PlayerGui.MainGui.ArtifactMenu.Holder.Impossible.Amount.Text:gsub("x",""))
                dungeonDone = true 
                wait(0.1)
                dungeonDone = false
                rs.Framework.RemoteEvent:FireServer(0,"UIServer","Teleport",{})
                repeat wait() until ws:FindFirstChild("HalloweenTower") == nil
            end)
        end
    end
end)
plrdata = rs.Data[plr.Name]
GemsOnExecution = plr.PlayerGui.MainGui.TopHolder.Gems.Price.Text:gsub("%p","")
spawn(function()
    while true do wait()
        if st.sendwebhook and dungeonDone then 
            gained = plr.PlayerGui.MainGui.TopHolder.Gems.Price.Text:gsub("%p","")-GemsOnExecution
            playerInfo = {}
            dungeonInfo = {}
            swordInfo = {}
            allAccountInfo = {}
            table.insert(playerInfo,"Username: "..plr.Name)
            table.insert(playerInfo,"Gems: "..plr.PlayerGui.MainGui.TopHolder.Gems.Price.Text)
            table.insert(playerInfo,"Gems Gained: +"..Comma(gained))
            table.insert(dungeonInfo,"Last Dungeon Run Time: "..plrdata.Stats.FastestDungeonRun.Value/1000)
            table.insert(dungeonInfo,"Total Dungeons Completed: "..plrdata.Stats.DungeonsCompleted.Value)
            table.insert(playerInfo,"------\nArtifacts:\n------")
            for i,v in pairs(plr.PlayerGui.MainGui.ArtifactMenu.Holder:GetChildren()) do 
                if v.Name == "Common" or  v.Name == "Rare" or v.Name == "Epic" or v.Name == "Legendary" or v.Name == "Impossible" then 
                    table.insert(playerInfo,v.Name..": "..v:FindFirstChild("Amount").Text:gsub("x",""))
                end
            end
            for i,v in pairs(plr.Backpack:GetChildren()) do 
                if v:FindFirstChild("Config") and v.Config:FindFirstChild("Rarity") and v.Config:FindFirstChild("Mold") and v.Config:FindFirstChild("Cracked") and v.Config:FindFirstChild("ITEMID") and v.Config:FindFirstChild("Class") then 
                    if v.Config.ITEMID.Value ~= st.chestid and v.Config.ITEMID.Value ~= st.farmid then 
                        if v.Config.Mold.Value >= st.mold and v.Config.Cracked.Value == true or v.Config.Rarity.Value >= st.rarity then 
                            if v.Config.Class.Value > 0 then 
                                v.Config.Class.Value = 0
                                table.insert(swordInfo,"Rarity: "..rs.Rarities[v.Config.Rarity.Value].RarityName.Value.." | ".."Quality: "..rs.Qualities[v.Config.Quality.Value].QualityName.Value.." | ".."Mold: "..rs.AllMolds[v.Config.Mold.Value].MoldName.Value.." | ".."Cracked: "..tostring(v.Config.Cracked.Value))
                            end
                        end
                    end
                end
            end 
            if #swordInfo == 0 then 
                table.insert(swordInfo,"No New Swords")
            end
            totalGems = 0
            totalImps = 0
            for i,v in pairs(listfiles("finalfarm")) do 
                for _,k in pairs(listfiles(v)) do 
                    if k:find("totalgems") then 
                        totalGems = totalGems+readfile(k)
                    end
                    if k:find("totalimp") then 
                        totalImps = totalImps+readfile(k)
                    end
                end
            end
            table.insert(allAccountInfo,"Gems Accross All Accounts: "..Comma(totalGems))
            table.insert(allAccountInfo,"Impossibles Accross All Accounts: "..totalImps)
            local data =
            {
            ["content"] = "<@"..st.id..">",
            ["embeds"] = {{
                ["title"] = "OwO :blush: :pleading_face:",
                ["description"] = "",
                ["type"] = "rich",
                ["color"] = tonumber(0x000000),
                ["fields"] = {
                            {
                                ["name"] = "Player Info:",
                                ["value"] = "```"..table.concat(playerInfo,"\n\n").."```",
                                ["inline"] = false
                            },
                            {
                                ["name"] = "Dungeon Info:",
                                ["value"] = "```"..table.concat(dungeonInfo,"\n\n").."```",
                                ["inline"] = false
                            },
                            {
                                ["name"] = "Swords (New Only):",
                                ["value"] = "```"..table.concat(swordInfo,"\n\n").."```",
                                ["inline"] = false
                            },
                            {
                                ["name"] = "All Accounts:",
                                ["value"] = "```"..table.concat(allAccountInfo,"\n\n").."```",
                                ["inline"] = false
                            },
                        }
                    }}
                }
            local body = game:GetService("HttpService"):JSONEncode(data)
                                                                            
            local headers = {["content-type"] = "application/json"}
            request = http_request or request or HttpPost or syn.request or http.request
            local msg = {Url = st.url, Body = body, Method = "POST", Headers = headers}
            request(msg)
            wait(3)
        end
    end
end)
spawn(function()
    while true do wait()
        if st.render then 
            game:GetService("RunService"):Set3dRenderingEnabled(false)
        else
            game:GetService("RunService"):Set3dRenderingEnabled(true)
        end
    end
end)
spawn(function()
    while true do wait()
        if st.cap then 
            setfpscap(st.fps)
        else
            setfpscap(120)
        end
    end
end)
